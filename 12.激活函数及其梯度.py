import time
import torch

print('程序开始时间：',time.strftime('%Y-%m-%d %H:%M:%S'))

# 起源：青蛙神经分析：所有输入的加权和低于某一阈值时没有输出，高于某一阈值会有固定输出
# 最简单的激活函数：k个输入x1、x2、x3......xk满足Σ(an*xn)+b>0时，y输出为1，否则为0。
# 或者设中间变量z，z=Σ(an*xn)+b，z>0时，y输出为1，否则为0
# 为了对激活函数求梯度，提出了Sigmoid函数：f(x)=σ(x)=1/(1+e^(-x))这个函数来模拟激活函数。
# 这个Sigmoid函数可以将数据的范围进行压缩，从(-∞,+∞)压缩到(0,1)。
# 依据函数特点，Sigmoid函数的导数在0处为正且最大，往-∞和+∞方向减少并最终趋近于0.
# Sigmoid函数的导数：dσ/dx=σ(1-σ)。
#
print('---------------------------------------------------------------------------------------------------------------')

a = torch.linspace(-100,100,10).cuda()  # 从-100到100划分10个区间，并生成张量。
print('输出-100到100划分10个区间的张量a：',a)  # 输出a
sigmoid_a = torch.sigmoid(a)  # 对a里的元素做sigmoid处理（指定位置的值带入Sigmoid函数），保留位置不变。也可以使用F.sigmoid()来完成同样的操作。
print('对a做Sigmoid处理：',sigmoid_a)  #输出结果

print('---------------------------------------------------------------------------------------------------------------')
# 在RNN中经常使用Tanh激活函数。
# Tanh激活函数的表达式及与Sigmoid函数的关系：f(x)=tanh(x)=(e^x-e^(-x))/(e^x+e(-x))=2sigmoid(2x)-1
# Tanh将输入的数据从(-∞,+∞)压缩到(-1,1)。Tanh的斜率同样在0处最大。
#
print('---------------------------------------------------------------------------------------------------------------')

b = torch.linspace(-1,1,10).cuda()  # 从-1到1划分10个区间，并生成张量。
print('输出-1到1划分10个区间的张量b：',b)  # 再次输出a
tanh_b = torch.tanh(b)  # 对a里的元素做Tanh处理（指定位置的值带入Tanhd函数）。
print('对a做Tanh处理：',tanh_b)  #输出结果


print('---------------------------------------------------------------------------------------------------------------')
# Relu激活函数：输入的x>=0时，f(x)=x；其它情况，f(x)=0。
# Relu函数的优势是输入>0时，梯度总是1，方便计算，不会被放大与缩小，可以维持梯度不变，不会出现梯度离散与梯度爆炸。
# 一般情况下，优先使用Relu函数，遇到其它的情况，再考虑别的激活函数。
print('---------------------------------------------------------------------------------------------------------------')

print('输出之前生成的张量b：',b)  # 再次输出a
relu_b = torch.relu(b)  # 对a里的元素做relu处理（指定位置的值带入Relu函数）。
print('对a做Relu处理：',relu_b)  #输出结果

print('---------------------------------------------------------------------------------------------------------------')

print('程序结束时间：',time.strftime('%Y-%m-%d %H:%M:%S'))
#
